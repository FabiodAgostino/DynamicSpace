@using Infocad.DynamicSpace.DynamicEntities
@using Infocad.DynamicSpace.DynamicEntry
@using System.Dynamic
@using Infocad.DynamicSpace.DynamicAttributes
@using Infocad.DynamicSpace.DynamicFormats
@using System.Text.Json
@using Volo.Abp.Application.Dtos
@inherits DynamicSpaceComponentBase
@inject IMessageService MessageService

@if (Formats != null)
{
    @if (Entries?.Items?.Any() == true)
    {
        <div class="modern-card">
            <div class="modern-card-header">
                <Row Class="justify-content-between align-items-center">
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <h2 class="page-title">
                            <i class="fas fa-cubes"></i>
                            @L["Dynamic Entities"]
                        </h2>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <Button Color="Color.Light" Class="new-btn" Clicked="OpenCreateModal">
                            <i class="fas fa-plus-circle me-2"></i>
                            @L["NewEntity"]
                        </Button>
                    </Column>
                </Row>
            </div>
            <div class="modern-card-body">
                <div class="table-responsive">
                    <DataGrid TItem="ExpandoObject"
                              Data="@Entries.Items.Select(x => convertToExpandoObject(x))"
                              TotalItems="Entries.Items.Count()"
                              ShowPager="true"
                              @ref="@_grid"
                              Class="modern-datagrid">
                        <DataGridColumns>
                            <DataGridColumn TItem="ExpandoObject" Caption="@L["Actions"]" Width="120px" TextAlignment="TextAlignment.Center" Sortable="false">
                                <DisplayTemplate>
                                    <div class="actions-wrapper">
                                        <Dropdown Direction="Direction.End">
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small" Class="actions-btn">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </DropdownToggle>
                                            <DropdownMenu Class="actions-dropdown">
                                                <DropdownItem Clicked="@(async () => await OpenEditModal(context))" Class="dropdown-item-custom">
                                                    <i class="fas fa-edit me-2"></i>@L["Edit"]
                                                </DropdownItem>
                                                <DropdownDivider />
                                                <DropdownItem Clicked="@(async () => await ConfirmDelete(context))" Class="text-danger dropdown-item-custom">
                                                    <i class="fas fa-trash-alt me-2"></i>@L["Delete"]
                                                </DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                    </div>
                                </DisplayTemplate>
                            </DataGridColumn>
                            @foreach (var entityAttribute in Entity.Attributes.OrderBy(a => a.Order))
                            {
                                var attribute = Attributes.FirstOrDefault(f => f.Id == entityAttribute.DynamicAttributeId);
                                <DataGridColumn TItem="ExpandoObject"
                                                Field="@(attribute.Name)"
                                                Caption="@(entityAttribute.Label)"
                                                TextAlignment="TextAlignment.Start">
                                    <DisplayTemplate>
                                        @{
                                            string value = string.Empty;
                                            var dict = (IDictionary<string, object>)context;
                                            var format = Formats.FirstOrDefault(f => f.Id == entityAttribute.DynamicFormatId);
                                            dict.TryGetValue(attribute.Name, out var entry);
                                            if (format != null && !String.IsNullOrEmpty(format.FormatPattern))
                                            {
                                                value = format.ApplyFormat(entry);
                                            }
                                            else
                                            {
                                                value = entry?.ToString();
                                            }
                                        }
                                        <div class="dynamic-property-display">
                                            @if (!string.IsNullOrWhiteSpace(value))
                                            {
                                                @if (attribute.Type != DynamicAttributeType.Navigation)
                                                {
                                                    @value
                                                }
                                                else
                                                {
                                                    var expandoObj = JsonSerializer.Deserialize<ExpandoObject>(value, new JsonSerializerOptions
                                                    {
                                                        PropertyNameCaseInsensitive = true
                                                    });

                                                    var exp = (IDictionary<string, object>)expandoObj;
                                                    if (exp.TryGetValue("Value", out var v))
                                                    {
                                                        <a @onclick="@(() => _navigationModal.ShowModal(expandoObj))" class="clickable-link">@v</a>
                                                    }
                                                }
                                            }
                                        </div>
                                    </DisplayTemplate>
                                </DataGridColumn>
                            }
                        </DataGridColumns>
                    </DataGrid>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="empty-state-modern">
            <div class="empty-icon">
                <i class="fas fa-database"></i>
            </div>
            <h4>Nessuna entità dinamica trovata</h4>
            <p class="text-muted">Non ci sono ancora entità configurate nel sistema. Inizia creandone una nuova.</p>
            <Button Color="Color.Primary" Class="new-btn" Clicked="OpenCreateModal">
                <i class="fas fa-plus-circle me-2"></i>
                @L["NewEntity"]
            </Button>
        </div>
    }
}
<NavigationDetailModal @ref="_navigationModal" />

<style>
    .modern-card {
        border-radius: 20px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        border: none;
        background-color: white;
        margin-bottom: 1.5rem;
    }

    .modern-card-header {
        background: linear-gradient(135deg, #2B5A72, #224D5E);
        color: white;
        border-radius: 20px 20px 0 0;
        padding: 20px 25px;
        border: none;
    }

    .modern-card-body {
        padding: 25px;
        background: #f8f9fb;
        border-radius: 0 0 20px 20px;
        overflow: visible;
    }

    .page-title {
        margin: 0;
        font-weight: 700;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
        gap: 15px;
        color: white;
    }

    .new-btn {
        border-radius: 25px;
        padding: 10px 25px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 4px 15px rgba(74, 107, 189, 0.3);
        transition: all 0.3s ease;
    }

        .new-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 107, 189, 0.4);
        }

    .actions-wrapper {
        position: relative;
        display: flex;
        justify-content: center;
        z-index: 1000;
    }

    .actions-btn {
        padding: 8px 12px !important;
        min-width: 40px;
        border-radius: 20px !important;
    }

    .actions-dropdown {
        min-width: 140px !important;
        border-radius: 12px !important;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15) !important;
        border: none !important;
        z-index: 1050 !important;
    }

    .dropdown-item-custom {
        padding: 10px 15px !important;
        transition: all 0.2s ease;
        font-size: 0.9rem;
    }

        .dropdown-item-custom:hover {
            background-color: rgba(74, 107, 189, 0.1) !important;
            transform: translateX(2px);
        }

    .table-responsive {
        overflow-x: unset;
        border-radius: 16px;
    }

    .modern-datagrid {
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        position: relative;
    }

        .modern-datagrid .table {
            margin: 0;
            border-collapse: separate;
            border-spacing: 0;
            width: 100%;
            table-layout: auto;
        }

            .modern-datagrid .table thead th {
                background: linear-gradient(135deg, #f8f9fa, #e9ecef);
                border: none;
                padding: 15px 20px;
                font-weight: 600;
                color: #495057;
                text-transform: uppercase;
                font-size: 0.8rem;
                letter-spacing: 0.5px;
                border-bottom: 2px solid #dee2e6;
                position: relative;
                white-space: nowrap;
                vertical-align: middle;
            }

                .modern-datagrid .table thead th:first-child {
                    border-top-left-radius: 16px;
                    width: 120px;
                    min-width: 120px;
                    max-width: 120px;
                }

                .modern-datagrid .table thead th:last-child {
                    border-top-right-radius: 16px;
                }

            .modern-datagrid .table tbody td {
                padding: 15px 20px;
                border-bottom: 1px solid #f1f3f4;
                vertical-align: middle;
                position: relative;
                word-wrap: break-word;
                max-width: 250px;
            }

                .modern-datagrid .table tbody td:first-child {
                    width: 120px;
                    min-width: 120px;
                    max-width: 120px;
                    text-align: center;
                }

            .modern-datagrid .table tbody tr:hover {
                background-color: rgba(74, 107, 189, 0.05);
                transition: all 0.2s ease;
            }

            .modern-datagrid .table tbody tr:last-child td:first-child {
                border-bottom-left-radius: 16px;
            }

            .modern-datagrid .table tbody tr:last-child td:last-child {
                border-bottom-right-radius: 16px;
            }

    .dynamic-property-display {
        display: flex;
        align-items: center;
        gap: 8px;
        min-height: 24px;
    }

    .empty-state-modern {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 20px;
        padding: 60px 30px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        margin: 2rem 0;
    }

    .empty-icon {
        font-size: 4rem;
        color: #6c757d;
        margin-bottom: 1.5rem;
        opacity: 0.7;
    }

    .empty-state-modern h4 {
        color: #495057;
        margin-bottom: 0.5rem;
        font-weight: 600;
    }

    .empty-state-modern p {
        font-size: 1.1rem;
        margin-bottom: 2rem;
    }

    .dropdown-menu.show {
        z-index: 1055 !important;
    }

    td:has(.dropdown.show) {
        z-index: 1000;
        position: relative;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modern-card, .empty-state-modern {
        animation: fadeInUp 0.6s ease-out;
    }

    @@media (max-width: 768px) {
        .modern-card-body {
            padding: 15px;
        }

        .page-title {
            font-size: 1.3rem;
        }

        .new-btn {
            padding: 8px 16px;
            font-size: 0.9rem;
        }

        .empty-state-modern {
            padding: 40px 20px;
        }

        .empty-icon {
            font-size: 3rem;
        }

        .modern-datagrid .table thead th,
        .modern-datagrid .table tbody td {
            padding: 10px 15px;
            font-size: 0.9rem;
        }

        .actions-dropdown {
            position: fixed !important;
            top: auto !important;
            left: 50% !important;
            transform: translateX(-50%) !important;
            bottom: 20px !important;
        }
    }
</style>