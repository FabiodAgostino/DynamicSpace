@page "/file-management"
@using Infocad.DynamicSpace.Feature
@using Infocad.DynamicSpace.FileManagement
@using Microsoft.AspNetCore.Components.Forms
@using Blazorise
@using System.IO
@using Infocad.DynamicSpace.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.Features
@inject IFileManagementAppService FileManagementAppService
@inject IFeatureChecker FeatureChecker

@inject IJSRuntime JSRuntime
@inject IStringLocalizer<DynamicSpaceResource> L
@inherits DynamicSpaceComponentBase

<div class="files-modern-container">
    <div class="files-header">
        <div class="files-title">
            <i class="fas fa-folder-open me-2"></i>
            <span>@L["FileManagement"]</span>
            <span class="badge bg-primary ms-2">@Files.Count</span>
        </div>
        <div class="header-actions">
            <Button Color="Color.Info" 
                    Class="stats-btn" 
                    Clicked="OpenStatistics"
                    Title="Carica statistiche">
                <i class="fas fa-chart-line"></i>
            </Button>
            <Button Color="Color.Success" 
                    Class="add-file-btn" 
                    Clicked="OpenUploadModal" 
                    Title="Carica nuovo file">
                <i class="fas fa-plus"></i>
            </Button>
        </div>
    </div>

    @if (ShowStatistics)
    {
        <div class="files-statistics">
            <div class="stat-card stat-total">
                <div class="stat-icon">
                    <i class="fas fa-files"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@Statistics["TotalFiles"]</div>
                    <div class="stat-label">File Totali</div>
                </div>
            </div>
            <div class="stat-card stat-database">
                <div class="stat-icon">
                    <i class="fas fa-database"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@Statistics["DatabaseFiles"]</div>
                    <div class="stat-label">Database</div>
                </div>
            </div>
            <div class="stat-card stat-filesystem">
                <div class="stat-icon">
                    <i class="fas fa-hdd"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@Statistics["FileSystemFiles"]</div>
                    <div class="stat-label">FileSystem</div>
                </div>
            </div>
            <div class="stat-card stat-size">
                <div class="stat-icon">
                    <i class="fas fa-weight-hanging"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">@FormatFileSize((long)Statistics["TotalSize"])</div>
                    <div class="stat-label">Spazio Utilizzato</div>
                </div>
            </div>
        </div>
    }
    @if (!CanUploadAdvanced)
    {
        <Alert Color="Color.Warning" Visible="true">
            <strong>Pacchetto Basic:</strong> Puoi caricare solo immagini (max 5MB). Passa al Premium per documenti e storage illimitato.
        </Alert>
    }
    <div class="files-table-container">
        <table class="files-table">
            <thead>
                <tr>
                    <th style="width: 80px; text-align: center;">
                        <i class="fas fa-file me-1"></i>
                        Tipo
                    </th>
                    <th style="min-width: 250px;">
                        <i class="fas fa-signature me-1"></i>
                        Nome File
                    </th>
                    <th style="min-width: 120px;">
                        <i class="fas fa-tag me-1"></i>
                        Content Type
                    </th>
                    <th style="min-width: 100px;">
                        <i class="fas fa-weight me-1"></i>
                        Dimensione
                    </th>
                    <th style="min-width: 150px;">
                        <i class="fas fa-database me-1"></i>
                        Storage
                    </th>
                    <th style="min-width: 150px;">
                        <i class="fas fa-calendar me-1"></i>
                        Data Creazione
                    </th>
                    <th style="width: 120px; text-align: center;">
                        <i class="fas fa-cogs me-1"></i>
                        Azioni
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in Files.OrderByDescending(f => f.CreatedDate))
                {
                    <tr class="@GetFileRowClass(file)">
                        <td class="text-center">
                            <div class="file-icon">
                                <i class="@GetFileIcon(file.FileName)"></i>
                            </div>
                        </td>
                        <td>
                            <div class="file-name-cell">
                                <strong>@file.FileName</strong>
                                <small class="text-muted d-block">@file.BlobName.Split('/').LastOrDefault()</small>
                            </div>
                        </td>
                        <td>
                            <span class="content-type-badge">@file.ContentType</span>
                        </td>
                        <td>
                            <span class="file-size">@file.FormattedSize</span>
                        </td>
                        <td>
                            <div class="storage-info">
                                <Badge Color="@(file.StorageType == "Database" ? Color.Primary : Color.Success)" 
                                       Class="storage-badge">
                                    <i class="@(file.StorageType == "Database" ? "fas fa-database" : "fas fa-hdd") me-1"></i>
                                    @file.StorageType
                                </Badge>
                                <small class="container-type">@file.ContainerType</small>
                            </div>
                        </td>
                        <td>
                            <div class="date-cell">
                                <span class="date-main">@file.CreatedDate.ToString("dd/MM/yyyy")</span>
                                <small class="date-time">@file.CreatedDate.ToString("HH:mm")</small>
                            </div>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button type="button" 
                                        class="download-btn" 
                                        @onclick="() => DownloadFile(file)"
                                        title="Scarica file">
                                    <i class="fas fa-download"></i>
                                </button>
                                <button type="button" 
                                        class="remove-btn" 
                                        @onclick="() => DeleteFile(file)"
                                        title="Elimina file">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
                
                @if (!Files.Any())
                {
                    <tr>
                        <td colspan="7" class="empty-state-cell">
                            <div class="empty-files-state">
                                <i class="fas fa-folder-open"></i>
                                <p>Nessun file caricato</p>
                                <small class="text-muted">Clicca sul pulsante + per caricare il primo file</small>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (Files.Any())
    {
        <div class="files-footer">
            <div class="files-stats">
                <span class="stat-item">
                    <i class="fas fa-database text-primary me-1"></i>
                    Database: <strong>@Files.Count(f => f.StorageType == "Database")</strong>
                </span>
                <span class="stat-item">
                    <i class="fas fa-hdd text-success me-1"></i>
                    FileSystem: <strong>@Files.Count(f => f.StorageType == "FileSystem")</strong>
                </span>
                <span class="stat-item">
                    <i class="fas fa-file-alt text-info me-1"></i>
                    Documenti: <strong>@Files.Count(f => f.ContainerType == "Documents")</strong>
                </span>
                <span class="stat-item">
                    <i class="fas fa-image text-warning me-1"></i>
                    Immagini: <strong>@Files.Count(f => f.ContainerType == "Images")</strong>
                </span>
            </div>
        </div>
    }
</div>

<!-- Modal Upload -->
<Modal @ref="UploadModal" Class="upload-modal">
    <ModalContent IsCentered="true" Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>
                <i class="fas fa-cloud-upload-alt me-2"></i>
                Carica Nuovo File
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="upload-container">
                <Field>
                    <FieldLabel Class="upload-label">
                        <i class="fas fa-file me-2"></i>
                        Seleziona File
                    </FieldLabel>
                    <div class="file-input-wrapper">
                        <InputFile OnChange="HandleFileSelection" 
                                   accept="*/*" 
                                   Class="file-input-modern" />
                        <div class="file-input-overlay">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <span>Clicca per selezionare o trascina qui</span>
                        </div>
                    </div>
                    <FieldHelp Class="upload-help">
                        <div class="storage-destinations">
                            <div class="destination-info">
                                <i class="fas fa-database text-primary"></i>
                                <span><strong>Database:</strong> Documenti (PDF, DOCX, XLSX, etc.)</span>
                            </div>
                            <div class="destination-info">
                                <i class="fas fa-hdd text-success"></i>
                                <span><strong>FileSystem:</strong> Immagini (JPG, PNG, GIF, etc.)</span>
                            </div>
                        </div>
                    </FieldHelp>
                </Field>
                
                @if (SelectedFile != null)
                {
                    <div class="selected-file-info">
                        <div class="file-preview">
                            <div class="file-preview-icon">
                                <i class="@GetFileIcon(SelectedFile.Name)"></i>
                            </div>
                            <div class="file-preview-details">
                                <h6>@SelectedFile.Name</h6>
                                <div class="file-metadata">
                                    <span class="metadata-item">
                                        <i class="fas fa-weight me-1"></i>
                                        @FormatFileSize(SelectedFile.Size)
                                    </span>
                                    <span class="metadata-item">
                                        <i class="fas fa-tag me-1"></i>
                                        @SelectedFile.ContentType
                                    </span>
                                    <span class="metadata-item storage-destination">
                                        <i class="@(GetStorageDestination(SelectedFile.Name).Contains("Database") ? "fas fa-database" : "fas fa-hdd") me-1"></i>
                                        @GetStorageDestination(SelectedFile.Name)
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" 
                    Clicked="CloseUploadModal" 
                    Disabled="IsUploading"
                    Class="cancel-btn">
                <i class="fas fa-times me-2"></i>
                Annulla
            </Button>
            <Button Color="Color.Primary" 
                    Clicked="UploadFile" 
                    Disabled="SelectedFile == null || IsUploading"
                    Class="upload-btn">
                @if (IsUploading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                    <span>Caricamento...</span>
                }
                else
                {
                    <i class="fas fa-upload me-2"></i>
                    <span>Carica File</span>
                }
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private IReadOnlyList<FileInfoDto> Files = new List<FileInfoDto>();
    private int TotalCount;
    private Modal UploadModal;
    private IBrowserFile SelectedFile;
    private bool IsUploading;
    private Dictionary<string, object> Statistics;
    private bool CanUploadAdvanced = true;
    private bool ShowStatistics = false;
    protected override async Task OnInitializedAsync()
    {
        if (CurrentTenant.Id.HasValue)
            CanUploadAdvanced = await FeatureChecker.IsEnabledAsync(DynamicSpaceFeatures.AdvancedFileStorage);
        else
            CanUploadAdvanced = true;

        await GetFilesAsync();
        await LoadStatistics();
    }

    private async Task OnDataGridReadAsync(DataGridReadDataEventArgs<FileInfoDto> e)
    {
        await GetFilesAsync();
    }

    private async Task GetFilesAsync()
    {
        try
        {
            var files = await FileManagementAppService.GetFileListAsync();
            Files = files;
            TotalCount = files.Count;
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private void OpenStatistics()
    {
        ShowStatistics = ShowStatistics == false ? true : false;
    }

    private async Task LoadStatistics()
    {
        try
        {
            Statistics = await FileManagementAppService.GetStorageStatisticsAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private void OpenUploadModal()
    {
        UploadModal.Show();
    }

    private void CloseUploadModal()
    {
        SelectedFile = null;
        IsUploading = false;
        UploadModal.Hide();
    }

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
    }

    private async Task UploadFile()
    {
        if (SelectedFile == null) return;

        try
        {
            IsUploading = true;
            StateHasChanged();

            using var stream = SelectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var uploadDto = new FileUploadDto
            {
                FileName = SelectedFile.Name,
                ContentType = SelectedFile.ContentType,
                Content = memoryStream.ToArray()
            };

            await FileManagementAppService.UploadFileAsync(uploadDto);

            await Message.Success("File caricato con successo!");
            await GetFilesAsync();
            await LoadStatistics();
            CloseUploadModal();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
        finally
        {
            IsUploading = false;
            StateHasChanged();
        }
    }

    private async Task DownloadFile(FileInfoDto fileInfo)
    {
        try
        {
            var fileDownload = await FileManagementAppService.DownloadFileAsync(fileInfo.Id);
            await JSRuntime.InvokeVoidAsync("downloadFile", fileDownload.FileName, fileDownload.ContentType, fileDownload.Content);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    private async Task DeleteFile(FileInfoDto fileInfo)
    {
        if (await Message.Confirm($"Sei sicuro di voler eliminare il file '{fileInfo.FileName}'?"))
        {
            try
            {
                await FileManagementAppService.DeleteFileAsync(fileInfo.Id);
                await Message.Success("File eliminato con successo!");
                await GetFilesAsync();
                await LoadStatistics();
            }
            catch (Exception ex)
            {
                await HandleErrorAsync(ex);
            }
        }
    }

    private string GetStorageDestination(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".webp" or ".svg" => "FileSystem (Immagini)",
            _ => "Database (Documenti)"
        };
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "fas fa-file-pdf text-danger",
            ".doc" or ".docx" => "fas fa-file-word text-primary",
            ".xls" or ".xlsx" => "fas fa-file-excel text-success",
            ".ppt" or ".pptx" => "fas fa-file-powerpoint text-warning",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".webp" or ".svg" => "fas fa-file-image text-info",
            ".txt" => "fas fa-file-alt text-secondary",
            ".zip" or ".rar" or ".7z" => "fas fa-file-archive text-dark",
            _ => "fas fa-file text-muted"
        };
    }

    private string GetFileRowClass(FileInfoDto file)
    {
        var baseClass = "file-row";
        if (file.StorageType == "Database")
            baseClass += " database-file-row";
        else
            baseClass += " filesystem-file-row";
        
        return baseClass;
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}

<style>
    .files-modern-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        gap: 20px;
    }

    .files-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 0;
        border-bottom: 2px solid #e9ecef;
    }

    .files-title {
        display: flex;
        align-items: center;
        font-size: 1.2rem;
        font-weight: 600;
        color: #495057;
    }

    .files-title .badge {
        font-size: 0.75rem;
    }

    .header-actions {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .stats-btn {
        background: linear-gradient(135deg, #17a2b8, #138496) !important;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        color: white;
        font-size: 1.1rem;
        box-shadow: 0 4px 15px rgba(23, 162, 184, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
        display: flex !important; /* ✅ AGGIUNGI QUESTA */
        align-items: center !important; /* ✅ AGGIUNGI QUESTA */
        justify-content: center !important; /* ✅ AGGIUNGI QUESTA */
    }

    .stats-btn:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 6px 20px rgba(23, 162, 184, 0.4);
        background: linear-gradient(135deg, #138496, #17a2b8) !important;
    }

    .add-file-btn {
        background: linear-gradient(135deg, #2B5A72, #3c6d87) !important;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        color: white;
        font-size: 1.2rem;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        transition: all 0.3s ease;
        display: flex !important; /* ✅ AGGIUNGI QUESTA */
        align-items: center !important; /* ✅ AGGIUNGI QUESTA */
        justify-content: center !important; /* ✅ AGGIUNGI QUESTA */
        cursor: pointer;
    }

    .add-file-btn:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        background: linear-gradient(135deg, #2B5A72, #3c6d87) !important;
    }

    .files-statistics {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 10px;
    }

    .stat-card {
        background: linear-gradient(135deg, #fff, #f8f9fa);
        border-radius: 12px;
        padding: 20px;
        display: flex;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        border: 1px solid #e9ecef;
        transition: transform 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0,0,0,0.12);
    }

    .stat-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 15px;
        font-size: 1.5rem;
    }

    .stat-total .stat-icon {
        background: linear-gradient(135deg, #6f42c1, #8a63d2);
        color: white;
    }

    .stat-database .stat-icon {
        background: linear-gradient(135deg, #007bff, #3395ff);
        color: white;
    }

    .stat-filesystem .stat-icon {
        background: linear-gradient(135deg, #28a745, #5cb85c);
        color: white;
    }

    .stat-size .stat-icon {
        background: linear-gradient(135deg, #fd7e14, #ff922b);
        color: white;
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: #495057;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #6c757d;
        font-weight: 500;
    }

    .files-table-container {
        flex: 1;
        overflow: auto;
        border-radius: 12px;
        border: 2px solid #e9ecef;
        background: white;
        max-height: 500px;
        min-height: 300px;
    }

    .files-table {
        width: 100%;
        min-width: 1100px;
        border-collapse: separate;
        border-spacing: 0;
        margin: 0;
    }

    .files-table thead th {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: none;
        padding: 15px 12px;
        font-weight: 600;
        color: #495057;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
        position: sticky;
        top: 0;
        z-index: 10;
        border-bottom: 2px solid #dee2e6;
        white-space: nowrap;
    }

    .files-table thead th:first-child {
        border-top-left-radius: 12px;
    }

    .files-table thead th:last-child {
        border-top-right-radius: 12px;
    }

    .files-table tbody td {
        padding: 12px;
        border-bottom: 1px solid #f1f3f4;
        vertical-align: middle;
    }

    .file-row {
        transition: background-color 0.2s ease;
    }

    .file-row:hover {
        background-color: rgba(74, 107, 189, 0.05);
    }

    .database-file-row {
        border-left: 4px solid #007bff;
    }

    .filesystem-file-row {
        border-left: 4px solid #28a745;
    }

    .file-icon {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        border-radius: 8px;
        font-size: 1.2rem;
    }

    .file-name-cell strong {
        color: #495057;
        font-weight: 600;
    }

    .content-type-badge {
        background: #e9ecef;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        color: #495057;
    }

    .file-size {
        font-weight: 600;
        color: #6c757d;
    }

    .storage-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .storage-badge {
        font-size: 0.8rem !important;
        padding: 4px 8px !important;
    }

    .container-type {
        color: #6c757d;
        font-size: 0.75rem;
    }

    .date-cell {
        display: flex;
        flex-direction: column;
    }

    .date-main {
        font-weight: 600;
        color: #495057;
    }

    .date-time {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .action-buttons {
        display: flex;
        gap: 5px;
        align-items: center;
        justify-content: center;
    }

    .download-btn {
        background: linear-gradient(135deg, #17a2b8, #138496);
        border: none;
        border-radius: 6px;
        width: 32px;
        height: 32px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .download-btn:hover {
        transform: translateY(-1px) scale(1.05);
        box-shadow: 0 4px 15px rgba(23, 162, 184, 0.3);
    }

    .remove-btn {
        background: linear-gradient(135deg, #dc3545, #c82333);
        border: none;
        border-radius: 6px;
        width: 32px;
        height: 32px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .remove-btn:hover {
        transform: translateY(-1px) scale(1.05);
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
    }

    .empty-state-cell {
        text-align: center;
        padding: 60px 20px;
    }

    .empty-files-state {
        color: #6c757d;
    }

    .empty-files-state i {
        font-size: 3rem;
        margin-bottom: 15px;
        display: block;
        opacity: 0.5;
    }

    .empty-files-state p {
        margin: 15px 0 5px 0;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .files-footer {
        padding: 15px 0;
        border-top: 2px solid #e9ecef;
        background: rgba(248, 249, 251, 0.5);
        border-radius: 0 0 12px 12px;
    }

    .files-stats {
        display: flex;
        gap: 20px;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
    }

    .stat-item {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        color: #495057;
    }

    /* Upload Modal Styles */
    .upload-container {
        padding: 10px 0;
    }

    .upload-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 10px;
    }

    .file-input-wrapper {
        position: relative;
        border: 2px dashed #dee2e6;
        border-radius: 12px;
        padding: 40px 20px;
        text-align: center;
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .file-input-wrapper:hover {
        border-color: #2B5A72;
        background: rgba(74, 107, 189, 0.02);
    }

    .file-input-modern {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        opacity: 0;
        cursor: pointer;
    }

    .file-input-overlay {
        pointer-events: none;
        color: #6c757d;
    }

    .file-input-overlay i {
        font-size: 2rem;
        margin-bottom: 10px;
        display: block;
    }

    .storage-destinations {
        display: flex;
        gap: 20px;
        margin-top: 15px;
        justify-content: center;
    }

    .destination-info {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
    }

    .selected-file-info {
        margin-top: 20px;
        padding: 20px;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border-radius: 12px;
        border: 1px solid #dee2e6;
    }

    .file-preview {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .file-preview-icon {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        border-radius: 12px;
        font-size: 1.8rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .file-preview-details h6 {
        margin: 0 0 10px 0;
        font-weight: 600;
        color: #495057;
    }

    .file-metadata {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .metadata-item {
        display: flex;
        align-items: center;
        font-size: 0.85rem;
        color: #6c757d;
        background: white;
        padding: 4px 8px;
        border-radius: 6px;
        border: 1px solid #e9ecef;
    }

    .storage-destination {
        font-weight: 600;
        color: #495057 !important;
    }

    .upload-btn {
        background: linear-gradient(135deg, #2B5A72, #3c6d87) !important;
        border: none !important;
        font-weight: 600;
        padding: 10px 20px;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

        .upload-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(74, 107, 189, 0.3);
            background: linear-gradient(135deg, #3c6d87, #2B5A72) !important;
        }

    .cancel-btn {
        font-weight: 600;
        padding: 10px 20px;
        border-radius: 8px;
    }

    /* Scrollbar personalizzata */
    .files-table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .files-table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .files-table-container::-webkit-scrollbar-thumb {
        background: #2B5A72;
        border-radius: 4px;
    }

        .files-table-container::-webkit-scrollbar-thumb:hover {
            background: #3d5aa3;
        }

    /* Responsive design */
    @@media (max-width: 1200px) {
        .files-statistics

    {
        grid-template-columns: repeat(2, 1fr);
    }

    }

    @@media (max-width: 768px) {
        .files-table

    {
        min-width: 800px;
    }

    .files-header {
        flex-direction: column;
        gap: 15px;
        align-items: stretch;
    }

    .header-actions {
        justify-content: center;
    }

    .files-stats {
        flex-direction: column;
        gap: 10px;
    }

    .files-statistics {
        grid-template-columns: 1fr;
    }

    .storage-destinations {
        flex-direction: column;
        gap: 10px;
    }

    .file-metadata {
        flex-direction: column;
        gap: 8px;
    }

    }

    @@media (max-width: 576px) {
        .files-table

    {
        min-width: 600px;
    }

    .stat-card {
        padding: 15px;
    }

    .stat-icon {
        width: 40px;
        height: 40px;
        margin-right: 10px;
        font-size: 1.2rem;
    }

    .stat-number {
        font-size: 1.2rem;
    }

    .file-input-wrapper {
        padding: 30px 15px;
    }

    .file-input-overlay i {
        font-size: 1.5rem;
    }

    }

    /* Animazioni */
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .file-row {
        animation: fadeIn 0.3s ease;
    }

    .stat-card {
        animation: fadeIn 0.5s ease;
    }

    .selected-file-info {
        animation: fadeIn 0.4s ease;
    }

    /* Stati di caricamento */
    .upload-btn:disabled {
        background: linear-gradient(135deg, #6c757d, #868e96) !important;
        cursor: not-allowed;
        transform: none;
    }

        .upload-btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }

    /* Focus states per accessibilità */
    .download-btn:focus,
    .remove-btn:focus,
    .add-file-btn:focus,
    .stats-btn:focus {
        outline: 2px solid #2B5A72;
        outline-offset: 2px;
    }

    .file-input-modern:focus + .file-input-overlay {
        border-color: #2B5A72;
        background: rgba(74, 107, 189, 0.05);
    }

    /* Miglioramenti per il contrasto */
    .text-muted {
        color: #6c757d !important;
    }

    .badge {
        font-weight: 600;
    }

    /* Effetti hover migliorati */
    .stat-card:hover .stat-icon {
        transform: scale(1.1);
        transition: transform 0.2s ease;
    }

    .file-row:hover .file-icon {
        transform: scale(1.05);
        background: #e9ecef;
        transition: all 0.2s ease;
    }

    .file-row:hover .action-buttons button {
        transform: translateY(-1px);
    }

    /* Loading states */
    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }

    /* Badge personalizzati */
    .storage-badge {
        border: none !important;
        font-weight: 600 !important;
        letter-spacing: 0.5px;
    }

    /* Modal miglioramenti */
    .upload-modal .modal-dialog {
        margin: 1.75rem auto;
    }

    .upload-modal .modal-content {
        border-radius: 12px;
        border: none;
        box-shadow: 0 10px 40px rgba(0,0,0,0.1);
    }

    .upload-modal .modal-header {
        border-bottom: 2px solid #e9ecef;
        padding: 20px 24px;
    }

    .upload-modal .modal-body {
        padding: 24px;
    }

    .upload-modal .modal-footer {
        border-top: 2px solid #e9ecef;
        padding: 20px 24px;
    }

    /* Tooltip styles */
    [title] {
        position: relative;
    }

    /* File type specific colors */
    .text-danger {
        color: #dc3545 !important;
    }

    .text-primary {
        color: #007bff !important;
    }

    .text-success {
        color: #28a745 !important;
    }

    .text-warning {
        color: #ffc107 !important;
    }

    .text-info {
        color: #17a2b8 !important;
    }

    .text-secondary {
        color: #6c757d !important;
    }

    .text-dark {
        color: #343a40 !important;
    }

    .text-muted {
        color: #6c757d !important;
    }

    .text-purple {
        color: #6f42c1 !important;
    }

    /* Stati di errore */
    .file-input-wrapper.error {
        border-color: #dc3545;
        background: rgba(220, 53, 69, 0.05);
    }

        .file-input-wrapper.error .file-input-overlay {
            color: #dc3545;
        }

    /* Stati di successo */
    .file-input-wrapper.success {
        border-color: #28a745;
        background: rgba(40, 167, 69, 0.05);
    }

        .file-input-wrapper.success .file-input-overlay {
            color: #28a745;
        }

    /* Drag and drop states */
    .file-input-wrapper.drag-over {
        border-color: #2B5A72;
        background: rgba(74, 107, 189, 0.1);
        transform: scale(1.02);
    }

        .file-input-wrapper.drag-over .file-input-overlay {
            color: #2B5A72;
        }

    /* Accessibility improvements */
    .sr-only {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0,0,0,0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }

    /* High contrast mode support */
@@media (prefers-contrast: high) {
        .files-table

    {
        border: 2px solid #000;
    }

    .file-row {
        border-bottom: 1px solid #000;
    }

    .action-buttons button {
        border: 1px solid #000;
    }

    }

    /* Reduced motion support */
    @@media (prefers-reduced-motion: reduce) {
        *

    {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }

    }

    /* Print styles */
    @@media print {
        .action-buttons, .header-actions, .upload-modal

    {
        display: none !important;
    }

    .files-table {
        border: 1px solid #000;
    }

    .file-row {
        border-bottom: 1px solid #000;
    }

    }
    </style>