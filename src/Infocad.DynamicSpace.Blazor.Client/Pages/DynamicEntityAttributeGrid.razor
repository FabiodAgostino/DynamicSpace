@using Blazorise
@using System.Collections.Generic
@using Infocad.DynamicSpace.DynamicAttributes
@using Infocad.DynamicSpace.DynamicControls
@using Infocad.DynamicSpace.DynamicEntities
@using Infocad.DynamicSpace.DynamicEntityAttributes
@using Infocad.DynamicSpace.DynamicFormats
@using Infocad.DynamicSpace.DynamicRules
@using Infocad.DynamicSpace.Localization
@using Microsoft.Extensions.Localization
@using System.Reflection
@inject IStringLocalizer<DynamicSpaceResource> L

<div class="attributes-modern-container">
    <div class="attributes-header">
        <div class="attributes-title">
            <i class="fas fa-list-ul me-2"></i>
            <span>@L["Attributes"]</span>
            <span class="badge bg-primary ms-2">@EntityAttributes.Count</span>
        </div>
        <Button Color="Color.Success" Class="add-attribute-btn" Clicked="AddAttribute" Title="Aggiungi nuovo attributo" Disabled="@(String.IsNullOrEmpty(NameEntity))">
            <i class="fas fa-plus"></i>
        </Button>
    </div>

    <div class="attributes-table-container">
        <table class="attributes-table">
            <thead>
                <tr>
                    <th style="width: 80px; text-align: center;">
                        <i class="fas fa-sort-numeric-down me-1"></i>
                        @L["Order"]
                    </th>
                    <th style="min-width: 200px;">
                        <i class="fas fa-tag me-1"></i>
                        @L["Attribute"]
                    </th>
                    <th style="min-width: 180px;">
                        <i class="fas fa-font me-1"></i>
                        @L["Label"]
                    </th>
                    <th style="min-width: 150px;">
                        <i class="fas fa-palette me-1"></i>
                        @L["Format"]
                    </th>
                    <th style="min-width: 150px;">
                        <i class="fas fa-gavel me-1"></i>
                        @L["Rule"]
                    </th>
                    <th style="min-width: 150px;">
                        @L["Controls"]
                    </th>
                    <th style="min-width: 150px;">
                        @L["Required"]
                    </th>
                    <th style="width: 100px; text-align: center;">
                        <i class="fas fa-cogs me-1"></i>
                        @L["Actions"]
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach(var property in _hybridProperties)
                {
                    <tr class="hybrid-property-row">
                        <td class="text-center">
                            <i class="fas fa-cube"></i>
                        </td>
                        <td>
                            <div class="hybrid-property-badge">
                                <i class="fas fa-link me-2"></i>
                                <strong>@property</strong>
                                <small class="text-muted ms-2">(Hybrid)</small>
                            </div>
                        </td>
                        <td>
                            <span class="text-muted font-italic">Auto-generato</span>
                        </td>
                        <td>
                            <span class="text-muted">—</span>
                        </td>
                        <td>
                            <span class="text-muted">—</span>
                        </td>
                        <td class="text-center">
                            <span class="text-muted">
                                <i class="fas fa-lock"></i>
                            </span>
                        </td>
                    </tr>
                }

                @foreach (var item in EntityAttributes.OrderBy(x=> x.Order))
                {
                    var order = item.Order;
                    <tr class="dynamic-attribute-row">
                        <td>
                            <div class="action-buttons">
                                <button type="button" 
                                        class="move-btn" 
                                        disabled="@(order == EntityAttributes.Min(x=> x.Order))" 
                                        @onclick="() => Move(item, true)"
                                        title="Sposta su">
                                    <i class="fas fa-chevron-up"></i>
                                </button>
                                <button type="button" 
                                        class="move-btn" 
                                        disabled="@(order == EntityAttributes.Max(x=> x.Order))" 
                                        @onclick="() => Move(item, false)"
                                        title="Sposta giù">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                            </div>
                        </td>
                        <td>
                            <Select TValue="Guid" 
                                    SelectedValue="item.DynamicAttributeId" 
                                    SelectedValueChanged="@((Guid id) => SetSelectValue(id,item))"
                                    Class="select-modern">
                                <SelectItem Value="Guid.Empty" Disabled>Seleziona attributo...</SelectItem>
                                @foreach (var attribut in AvailableAttributes)
                                {
                                    <SelectItem Value="@attribut.Id" 
                                               Disabled="@(EntityAttributes.Any(x=> x.DynamicAttributeId==attribut.Id))">
                                        <div class="select-item-content">
                                            <span class="attribute-name">@attribut.Name</span>
                                            <small class="attribute-type">(@attribut.Type)</small>
                                        </div>
                                    </SelectItem>
                                }
                            </Select>
                        </td>
                        <td>
                            <TextEdit @bind-Text="item.Label" 
                                      Class="text-edit-modern"
                                       />
                        </td>
                        <td>
                            @{
                                var attribute = AvailableAttributes.FirstOrDefault(x => x.Id == item.DynamicAttributeId);
                            }
                            <Select TValue="Guid?" @bind-SelectedValue="item.DynamicFormatId" Class="select-modern">
                                <SelectItem Value="@Guid.Empty">Nessun formato</SelectItem>
                                @if (attribute != null)
                                {
                                    @foreach (var format in AvailableFormats.Where(x => x.AttributeType == attribute.Type || x.Id == Guid.Empty))
                                    {
                                        <SelectItem Value="@format.Id">
                                            @format.Name
                                        </SelectItem>
                                    }
                                }
                            </Select>
                        </td>
                        <td>
                            <Select TValue="Guid?" @bind-SelectedValue="item.DynamicRuleId" Class="select-modern">
                                <SelectItem Value="@Guid.Empty">Nessuna regola</SelectItem>
                                @if (attribute != null)
                                {
                                    @foreach (var rule in AvailableRules.Where(x => x.AttributeType == attribute.Type || x.Id == Guid.Empty))
                                    {
                                        <SelectItem Value="@rule.Id">
                                            @rule.Name
                                        </SelectItem>
                                    }
                                }
                            </Select>
                        </td>
                        <td>
                            <Select TValue="Guid?" @bind-SelectedValue="item.DynamicControlId" Class="select-modern" Disabled="attribute==null || (attribute.Type != DynamicAttributeType.Navigation && attribute.Type != DynamicAttributeType.Service)">
                                <SelectItem Value="@Guid.Empty">Nessun controllo</SelectItem>
                                @if (attribute != null)
                                {
                                    @foreach (var control in AvailableControls.Where(x => x.Type == attribute.Type || x.Id == Guid.Empty))
                                    {
                                        <SelectItem Value="@control.Id">
                                            @control.Name
                                        </SelectItem>
                                    }
                                }
                            </Select>
                        </td>
                        <td>
                            <Check TValue="bool" @bind-Checked="@item.Required" />
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button type="button" 
                                        class="remove-btn" 
                                        @onclick="() => RemoveAttribute(item)"
                                        title="Rimuovi attributo">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
                
                @if (!EntityAttributes.Any() && !_hybridProperties.Any())
                {
                    <tr>
                        <td colspan="8" class="empty-state-cell">
                            <div class="empty-attributes-state">
                                <i class="fas fa-inbox"></i>
                                <p>Nessun attributo configurato</p>
                                <small class="text-muted">Clicca sul pulsante + per aggiungere il primo attributo</small>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (EntityAttributes.Any() || _hybridProperties.Any())
    {
        <div class="attributes-footer">
            <div class="attributes-stats">
                <span class="stat-item">
                    <i class="fas fa-cube text-success me-1"></i>
                    Proprietà Ibride: <strong>@_hybridProperties.Count</strong>
                </span>
                <span class="stat-item">
                    <i class="fas fa-sliders-h text-primary me-1"></i>
                    Attributi Dinamici: <strong>@EntityAttributes.Count</strong>
                </span>
                <span class="stat-item">
                    <i class="fas fa-list-ol text-info me-1"></i>
                    Totale: <strong>@(_hybridProperties.Count + EntityAttributes.Count)</strong>
                </span>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<CreateDynamicEntityAttributeDto> EntityAttributes { get; set; } = new();

    [Parameter, EditorRequired]
    public EventCallback<List<CreateDynamicEntityAttributeDto>> EntityAttributesChanged { get; set; }

    [Parameter]
    public List<DynamicAttributeDto> AvailableAttributes { get; set; } = new();
    [Parameter]
    public List<DynamicFormatDto> AvailableFormats { get; set; } = new();
    [Parameter]
    public List<DynamicRuleDto> AvailableRules { get; set; } = new();
    [Parameter]
    public List<DynamicControlDto> AvailableControls { get; set; } = new();


    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public EventCallback<CreateDynamicEntityAttributeDto> RemoveEntityAttribute { get; set; }

    [Parameter]
    public string? NameEntity { get; set; }

    [Parameter]
    public DynamicEntityDto? SelectedHybridEntity { get; set; }

    private DynamicEntityDto? _oldHybridEntity { get; set; }
    private List<string> _hybridProperties = new();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (SelectedHybridEntity != null && SelectedHybridEntity != _oldHybridEntity)
            {
                var t = Type.GetType(SelectedHybridEntity.HybridTypeName);
                _hybridProperties = GetEntityProperties(t);
                _oldHybridEntity = SelectedHybridEntity;
            }
            if (SelectedHybridEntity == null)
            {
                _hybridProperties = new List<string>();
                _oldHybridEntity = null;
            }
        }catch(Exception)
        {
            
        }

    }

    private async Task AddAttribute()
    {
        EntityAttributes.Add(new CreateDynamicEntityAttributeDto
            {
                DynamicAttributeId = Guid.Empty,
                Label = string.Empty,
                DynamicFormatId = null,
                DynamicRuleId = null,
                IsNew = true
            });
        await RefreshOrdersAsync();
    }

    private async Task RemoveAttribute(CreateDynamicEntityAttributeDto item)
    {
        EntityAttributes.Remove(item);
        if (RemoveEntityAttribute.HasDelegate && !item.IsNew)
            await RemoveEntityAttribute.InvokeAsync(item);
        await RefreshOrdersAsync();
    }

    private async Task Move(CreateDynamicEntityAttributeDto item, bool up)
    {
        var currentOrder = item.Order;
        var newOrder = up ? currentOrder - 1 : currentOrder + 1;

        var elementToSwap = EntityAttributes.FirstOrDefault(x => x.Order == newOrder);

        if (elementToSwap != null)
        {
            elementToSwap.Order = currentOrder;
            item.Order = newOrder;
        }
    }
    
    private Task SetSelectValue(Guid id, CreateDynamicEntityAttributeDto attribute)
    {
        attribute.DynamicAttributeId = id;
        if (!String.IsNullOrEmpty(NameEntity))
        {
            string attributeName = AvailableAttributes.FirstOrDefault(x => x.Id == id)?.Name ?? "";
            attribute.Label = $"{attributeName}_{NameEntity}";
        }
        return Task.CompletedTask;
    }

    private async Task RefreshOrdersAsync()
    {
        for (int i = 0; i < EntityAttributes.Count; i++)
        {
            EntityAttributes[i].Order = i;
        }
        await EntityAttributesChanged.InvokeAsync(EntityAttributes);
    }

    private List<string> GetEntityProperties(Type type)
    {
        return type.GetProperties(System.Reflection.BindingFlags.Public |
                                  System.Reflection.BindingFlags.Instance |
                                  System.Reflection.BindingFlags.DeclaredOnly)
                   .Select(p => p.Name).Where(x => x.ToLower() != "dynamicentityid")
                   .ToList();
    }
}

<style>
    .attributes-modern-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        gap: 15px;
    }

    .attributes-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        border-bottom: 2px solid #e9ecef;
    }

    .attributes-title {
        display: flex;
        align-items: center;
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
    }

    .attributes-title .badge {
        font-size: 0.75rem;
    }

    .add-attribute-btn {
        background: linear-gradient(135deg, #2B5A72, #3c6d87) !important;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        color: white;
        font-size: 1.2rem;
        font-weight: bold;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        transition: all 0.3s ease;
        cursor: pointer;
    }

    .add-attribute-btn:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        background: linear-gradient(135deg, #2B5A72, #3c6d87) !important;
    }

    .attributes-table-container {
        flex: 1;
        overflow: auto;
        border-radius: 12px;
        border: 2px solid #e9ecef;
        background: white;
        max-height: 400px;
        min-height: 200px;
    }

    .attributes-table {
        width: 100%;
        min-width: 900px;
        border-collapse: separate;
        border-spacing: 0;
        margin: 0;
    }

    .attributes-table thead th {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        border: none;
        padding: 15px 12px;
        font-weight: 600;
        color: #495057;
        text-transform: uppercase;
        font-size: 0.8rem;
        letter-spacing: 0.5px;
        position: sticky;
        top: 0;
        z-index: 10;
        border-bottom: 2px solid #dee2e6;
        white-space: nowrap;
    }

    .attributes-table thead th:first-child {
        border-top-left-radius: 12px;
    }

    .attributes-table thead th:last-child {
        border-top-right-radius: 12px;
    }

    .attributes-table tbody td {
        padding: 12px;
        border-bottom: 1px solid #f1f3f4;
        vertical-align: middle;
    }

    .attributes-table tbody tr:hover {
        background-color: rgba(74, 107, 189, 0.05);
    }

    .hybrid-property-row {
        background: linear-gradient(135deg, rgba(40, 167, 69, 0.1), rgba(32, 201, 151, 0.1));
        border-left: 4px solid #28a745;
    }

    .hybrid-property-badge {
        display: flex;
        align-items: center;
        font-weight: 600;
        color: #28a745;
    }

    .dynamic-attribute-row {
        transition: background-color 0.2s ease;
    }

    .action-buttons {
        display: flex;
        gap: 5px;
        align-items: center;
        justify-content: center;
    }

    .move-btn {
        border: none;
        background: #f8f9fa;
        border-radius: 6px;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .move-btn:hover:not(:disabled) {
        background: #2B5A72;
        color: white;
        transform: translateY(-1px);
    }

    .move-btn:disabled {
        opacity: 0.3;
        cursor: not-allowed;
    }

    .remove-btn {
        background: linear-gradient(135deg, #dc3545, #c82333);
        border: none;
        border-radius: 6px;
        width: 30px;
        height: 30px;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .remove-btn:hover {
        transform: translateY(-1px) scale(1.05);
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
    }

    .select-modern {
        border-radius: 8px !important;
        border: 1px solid #dee2e6 !important;
        padding: 8px 12px !important;
        font-size: 0.9rem !important;
        width: 100% !important;
        background: white !important;
    }

    .select-modern:focus {
        border-color: #2B5A72 !important;
        box-shadow: 0 0 0 0.15rem rgba(74, 107, 189, 0.15) !important;
    }

    .text-edit-modern {
        border-radius: 8px !important;
        border: 1px solid #dee2e6 !important;
        padding: 8px 12px !important;
        font-size: 0.9rem !important;
        width: 100% !important;
    }

    .text-edit-modern:focus {
        border-color: #2B5A72 !important;
        box-shadow: 0 0 0 0.15rem rgba(74, 107, 189, 0.15) !important;
    }

    .select-item-content {
        display: flex;
        flex-direction: column;
    }

    .attribute-name {
        font-weight: 600;
    }

    .attribute-type {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .format-pattern,
    .rule-description {
        color: #6c757d;
        font-size: 0.8rem;
    }

    .empty-state-cell {
        text-align: center;
        padding: 40px 20px;
    }

    .empty-attributes-state {
        color: #6c757d;
    }

    .empty-attributes-state i {
        font-size: 2rem;
        margin-bottom: 10px;
        display: block;
    }

    .empty-attributes-state p {
        margin: 10px 0 5px 0;
        font-weight: 600;
    }

    .attributes-footer {
        padding: 15px 0;
        border-top: 2px solid #e9ecef;
        background: rgba(248, 249, 251, 0.5);
        border-radius: 0 0 12px 12px;
    }

    .attributes-stats {
        display: flex;
        gap: 20px;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
    }

    .stat-item {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        color: #495057;
    }

    /* Scrollbar personalizzata */
    .attributes-table-container::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .attributes-table-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .attributes-table-container::-webkit-scrollbar-thumb {
        background: #2B5A72;
        border-radius: 4px;
    }

    .attributes-table-container::-webkit-scrollbar-thumb:hover {
        background: #3d5aa3;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .attributes-table {
            min-width: 700px;
        }
        
        .attributes-header {
            flex-direction: column;
            gap: 10px;
            align-items: stretch;
        }
        
        .attributes-stats {
            flex-direction: column;
            gap: 10px;
        }
    }
</style>